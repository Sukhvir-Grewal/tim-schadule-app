{
    "sourceFile": "static_version/script.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1722977912107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722977923779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,8 @@\n         scope: SCOPES.join(\" \"),\n         callback: \"\", // defined later\n     });\n     gisInited = true;\n-    console.log(\"Works\")\n     maybeEnableButtons();\n }\n \n function maybeEnableButtons() {\n"
                },
                {
                    "date": 1722997866848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,4 +275,10 @@\n     if (meridian.toUpperCase() === \"AM\" && hours === 12) hours = 0;\n \n     return [hours, minutes];\n }\n+\n+\n+// animation stuff\n+setTimeout(function() {\n+    document.getElementById('authorize_button').classList.add('show');\n+  }, 3000);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722997992743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,5 +280,5 @@\n \n // animation stuff\n setTimeout(function() {\n     document.getElementById('authorize_button').classList.add('show');\n-  }, 3000);\n\\ No newline at end of file\n+  }, 5000);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722997999011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,5 +280,5 @@\n \n // animation stuff\n setTimeout(function() {\n     document.getElementById('authorize_button').classList.add('show');\n-  }, 5000);\n\\ No newline at end of file\n+  }, 10000);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722998061008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,5 +280,5 @@\n \n // animation stuff\n setTimeout(function() {\n     document.getElementById('authorize_button').classList.add('show');\n-  }, 10000);\n\\ No newline at end of file\n+  }, 000);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722998068566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,5 +280,5 @@\n \n // animation stuff\n setTimeout(function() {\n     document.getElementById('authorize_button').classList.add('show');\n-  }, 000);\n\\ No newline at end of file\n+  }, 2000);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722998112855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n             });\n \n             if (duplicateEvent) {\n                 // Duplicate event found, return an error\n-                \n+\n                 console.log(\"Duplicate event found. Event not added.\");\n                 return;\n             }\n         }\n@@ -186,9 +186,8 @@\n         for (const line of scheduleLines) {\n             try {\n                 const event = parseScheduleLine(line);\n                 if (event) {\n-\n                     await checkDuplicateEvent(event);\n                     // document.getElementById(\"content\").innerHTML += `${line}`;\n                 }\n             } catch (error) {\n@@ -276,9 +275,8 @@\n \n     return [hours, minutes];\n }\n \n-\n // animation stuff\n-setTimeout(function() {\n-    document.getElementById('authorize_button').classList.add('show');\n-  }, 2000);\n\\ No newline at end of file\n+setTimeout(function () {\n+    document.getElementById(\"authorize_button\").classList.add(\"show\");\n+}, 2000);\n"
                },
                {
                    "date": 1722998260827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,5 +278,6 @@\n \n // animation stuff\n setTimeout(function () {\n     document.getElementById(\"authorize_button\").classList.add(\"show\");\n+    document.get\n }, 2000);\n"
                },
                {
                    "date": 1722998265887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,6 +278,6 @@\n \n // animation stuff\n setTimeout(function () {\n     document.getElementById(\"authorize_button\").classList.add(\"show\");\n-    document.get\n+    document.querySelector(\"logo\")\n }, 2000);\n"
                },
                {
                    "date": 1722998273055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,6 +278,6 @@\n \n // animation stuff\n setTimeout(function () {\n     document.getElementById(\"authorize_button\").classList.add(\"show\");\n-    document.querySelector(\"logo\")\n+    document.querySelector(\"logo\").classList\n }, 2000);\n"
                },
                {
                    "date": 1722998279214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,6 +278,6 @@\n \n // animation stuff\n setTimeout(function () {\n     document.getElementById(\"authorize_button\").classList.add(\"show\");\n-    document.querySelector(\"logo\").classList\n+    document.querySelector(\"logo\").classList.add(\"slideUp\")\n }, 2000);\n"
                },
                {
                    "date": 1722998611976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,6 +278,6 @@\n \n // animation stuff\n setTimeout(function () {\n     document.getElementById(\"authorize_button\").classList.add(\"show\");\n-    document.querySelector(\"logo\").classList.add(\"slideUp\")\n+    document.querySelector(\".logo\").classList.add(\"slideUp\");\n }, 2000);\n"
                }
            ],
            "date": 1722977912107,
            "name": "Commit-0",
            "content": "const CLIENT_ID =\n    \"788580741376-h1n2u0s3lsspsvs1u3gistjt900lvtuc.apps.googleusercontent.com\";\nconst API_KEY = \"AIzaSyDxVfP2-xB6zDClxXShf8AAQLJAI0dCscA\";\n\nconst DISCOVERY_DOCS = [\n    \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\",\n    \"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\",\n];\nconst SCOPES = [\n    \"https://www.googleapis.com/auth/calendar\",\n    \"https://www.googleapis.com/auth/gmail.readonly\",\n];\n\nlet tokenClient;\nlet gapiInited = false;\nlet gisInited = false;\nlet startDate = \"\";\nlet endDate = \"\";\n\ndocument.getElementById(\"authorize_button\").style.visibility = \"hidden\";\n\nfunction gapiLoaded() {\n    gapi.load(\"client\", initializeGapiClient);\n}\n\nasync function initializeGapiClient() {\n    await gapi.client.init({\n        apiKey: API_KEY,\n        discoveryDocs: DISCOVERY_DOCS,\n    });\n    gapiInited = true;\n    maybeEnableButtons();\n}\n\nfunction gisLoaded() {\n    tokenClient = google.accounts.oauth2.initTokenClient({\n        client_id: CLIENT_ID,\n        scope: SCOPES.join(\" \"),\n        callback: \"\", // defined later\n    });\n    gisInited = true;\n    console.log(\"Works\")\n    maybeEnableButtons();\n}\n\nfunction maybeEnableButtons() {\n    if (gapiInited && gisInited) {\n        document.getElementById(\"authorize_button\").style.visibility =\n            \"visible\";\n    }\n}\n\nfunction handleAuthClick() {\n    tokenClient.callback = async (resp) => {\n        if (resp.error !== undefined) {\n            console.error(\"Error during authorization:\", resp);\n            return;\n        }\n        document.getElementById(\"authorize_button\").style.visibility = \"hidden\";\n        // document.getElementById(\"content\").innerHTML =\n        //     \"Schedule has been Pushed To calendar ^^<br>\";\n\n        await getRecentEmailFromSender();\n    };\n\n    if (gapi.client.getToken() === null) {\n        tokenClient.requestAccessToken({ prompt: \"consent\" });\n    } else {\n        tokenClient.requestAccessToken({ prompt: \"\" });\n    }\n}\n\nasync function addEvent(event) {\n    try {\n        const response = await gapi.client.calendar.events.insert({\n            calendarId: \"primary\",\n            resource: event,\n        });\n        // console.log(\"Event created: \", response.result.htmlLink);\n    } catch (err) {\n        console.error(\"Error contacting the Calendar service: \", err.message);\n    }\n}\n\nasync function checkDuplicateEvent(newEvent) {\n    const calendar = gapi.client.calendar;\n\n    try {\n        // List events within the time range of the new event\n        const response = await calendar.events.list({\n            calendarId: \"primary\",\n            timeMin: newEvent.start.dateTime,\n            timeMax: newEvent.end.dateTime,\n            singleEvents: true,\n            orderBy: \"startTime\",\n        });\n\n        const events = response.result.items;\n\n        if (events.length > 0) {\n            // Check if any event matches the new event's details\n            const duplicateEvent = events.find((event) => {\n                // Compare start and end time, allowing for small differences (e.g., due to different time zones)\n                const startTimeMatches =\n                    Math.abs(\n                        new Date(event.start.dateTime) -\n                            new Date(newEvent.start.dateTime)\n                    ) < 60000; // 1 minute tolerance\n                const endTimeMatches =\n                    Math.abs(\n                        new Date(event.end.dateTime) -\n                            new Date(newEvent.end.dateTime)\n                    ) < 60000;\n\n                // Compare other details\n                return (\n                    event.summary === newEvent.summary &&\n                    startTimeMatches &&\n                    endTimeMatches &&\n                    event.location === newEvent.location\n                );\n            });\n\n            if (duplicateEvent) {\n                // Duplicate event found, return an error\n                \n                console.log(\"Duplicate event found. Event not added.\");\n                return;\n            }\n        }\n\n        // No duplicate found, add the new event\n        await addEvent(newEvent);\n        console.log(\"Event added successfully.\");\n    } catch (error) {\n        console.error(\"Error checking or adding event:\", error.message);\n    }\n}\n\nasync function getRecentEmailFromSender() {\n    try {\n        // List messages from the specified sender\n        const res = await gapi.client.gmail.users.messages.list({\n            userId: \"me\",\n            q: `from:noreply@clearviewconnect.com`,\n            maxResults: 1,\n            orderBy: \"date\",\n        });\n\n        const messages = res.result.messages;\n        if (!messages || messages.length === 0) {\n            console.log(\"No message found\");\n            return;\n        }\n\n        // Get the most recent message\n        const messageId = messages[0].id;\n        const messageRes = await gapi.client.gmail.users.messages.get({\n            userId: \"me\",\n            id: messageId,\n        });\n        const emailData = messageRes.result;\n        const encodedBody = emailData.payload.parts\n            ? emailData.payload.parts[0].body.data\n            : emailData.payload.body.data;\n\n        // Decode the body\n        const decodedBody = atob(\n            encodedBody.replace(/-/g, \"+\").replace(/_/g, \"/\")\n        );\n\n        // Extract the schedule details\n        const scheduleLines = decodedBody\n            .split(\"\\n\")\n            .filter((line) =>\n                line.match(\n                    /^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+\\d{2}:/\n                )\n            );\n\n        if (scheduleLines.length === 0) {\n            console.log(\"No schedule lines found.\");\n            return;\n        }\n\n        // Parse the schedule lines and add events\n        for (const line of scheduleLines) {\n            try {\n                const event = parseScheduleLine(line);\n                if (event) {\n\n                    await checkDuplicateEvent(event);\n                    // document.getElementById(\"content\").innerHTML += `${line}`;\n                }\n            } catch (error) {\n                console.error(\"Error parsing or adding event:\", error.message);\n            }\n            endDate = line.split(\":\")[0].trim();\n        }\n        startDate = scheduleLines[0].split(\":\")[0].trim();\n        document.getElementById(\n            \"content\"\n        ).innerHTML += `Schedule from ${startDate} to ${endDate} has been Posted on calender`;\n    } catch (error) {\n        console.error(\"Error fetching email:\", error.message);\n    }\n}\n\nfunction parseScheduleLine(line) {\n    try {\n        // Check for \"Not Scheduled\" and skip such lines\n        if (line.includes(\"Not Scheduled\")) {\n            console.log(`Skipping non-scheduled day`);\n            return null;\n        }\n\n        // Extract date part and time details\n        const [datePart, rest] = line.split(/:\\s+/);\n        const timeAndDetails = rest.trim();\n\n        // Handle specific cases based on structure\n        const [timeRange] = timeAndDetails.split(/\\s*,\\s*/);\n        const [startTime, endTime] = timeRange\n            .split(\" - \")\n            .map((time) => time.trim());\n\n        // Extract month and day\n        const [month, day] = datePart.split(/\\s+/);\n        const year = new Date().getFullYear();\n        const date = new Date(`${month} ${day}, ${year}`);\n\n        // Convert times to Date objects\n        const startDateTime = new Date(date);\n        const endDateTime = new Date(date);\n\n        const [startHours, startMinutes] = convertTo24Hour(startTime);\n        const [endHours, endMinutes] = convertTo24Hour(endTime);\n\n        startDateTime.setHours(startHours, startMinutes);\n        endDateTime.setHours(endHours, endMinutes);\n\n        return {\n            summary: `Tim~Shift`,\n            start: {\n                dateTime: startDateTime.toISOString(),\n                timeZone: \"America/Halifax\",\n            },\n            end: {\n                dateTime: endDateTime.toISOString(),\n                timeZone: \"America/Halifax\",\n            },\n            colorId: \"5\", // Optional: color ID for the event\n        };\n    } catch (error) {\n        console.error(\"Error parsing schedule line:\", error.message);\n        throw new Error(\"Invalid schedule line format\");\n    }\n}\n\nfunction convertTo24Hour(time) {\n    if (!time) {\n        throw new Error(\"Invalid time format\");\n    }\n\n    const match = time.match(/(\\d{1,2}):(\\d{2})(AM|PM)/i);\n\n    if (!match) {\n        throw new Error(\"Time format does not match\");\n    }\n\n    let [hours, minutes, meridian] = match.slice(1);\n    hours = parseInt(hours, 10);\n    minutes = parseInt(minutes, 10);\n\n    if (meridian.toUpperCase() === \"PM\" && hours < 12) hours += 12;\n    if (meridian.toUpperCase() === \"AM\" && hours === 12) hours = 0;\n\n    return [hours, minutes];\n}\n"
        }
    ]
}